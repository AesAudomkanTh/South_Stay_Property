// src/context/AuthContext.jsx
import React, { createContext, useContext, useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";

const API_BASE = import.meta.env.VITE_API_BASE_URL || "http://localhost:5000";
const AuthContext = createContext(null);

export function AuthProvider({ children }) {
  const navigate = useNavigate();
  const [token, setToken] = useState(() => localStorage.getItem("token") || "");
  const [user, setUser] = useState(() => {
    const raw = localStorage.getItem("user");
    try { return raw ? JSON.parse(raw) : null; } catch { return null; }
  });

  const isAuthenticated = !!token;

  async function login(usernameOrEmail, password) {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ usernameOrEmail, password })
    });

    const data = await res.json().catch(() => ({}));
    if (!res.ok) {
      throw new Error(data?.message || "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

    const tk = data.token || data?.access_token;
    if (!tk) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");

    setToken(tk);
    localStorage.setItem("token", tk);

    // ‡∏ñ‡πâ‡∏≤ backend ‡∏™‡πà‡∏á snapshot user ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‡∏Å‡πá‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏•‡∏¢
    if (data.user) {
      setUser(data.user);
      localStorage.setItem("user", JSON.stringify(data.user));
    } else {
      // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Å‡πá‡∏¢‡∏¥‡∏á /me ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
      await fetchMe(tk);
    }

    toast.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ");
    navigate("/");
  }

  function logout() {
    setToken("");
    setUser(null);
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    toast.success("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß");
    navigate("/");
  }

  async function fetchMe(currentToken = token) {
    if (!currentToken) return;
    try {
      const r = await fetch(`${API_BASE}/api/auth/me`, {
        headers: { Authorization: `Bearer ${currentToken}` },
      });
      if (r.ok) {
        // ‚¨ÖÔ∏è /me ‡∏Ñ‡∏∑‡∏ô‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå user ‚Äú‡πÅ‡∏ö‡∏ô‚Äù ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà { user: ... }
        const u = await r.json();
        setUser(u);
        localStorage.setItem("user", JSON.stringify(u));
      }
    } catch {
      // ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÑ‡∏ß‡πâ ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡πÅ‡∏ï‡∏Å
    }
  }

  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä ‚Üí ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á /me
    if (token && !user) fetchMe(token);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [token]);

  const value = { token, user, isAuthenticated, login, logout, setUser };
  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("useAuth must be used within <AuthProvider>");
  return ctx;
}
